var board = (function() {

   var $board = $("#board");
   var $board_header = $("#board_header");
   var $new_game = $("#new_game");

   const HEIGHT = 9;
   const WIDTH = 9;

   var board;

   var $selected = null;

   const typeNames = [
      'empty',
      'attacker',
      'defender',
      'king'
   ];

   function onClick() {
      var $cell = $(this);
      var type = $cell.attr('class');

      if(type == "attacker") {
         if($selected) {
            $selected.attr('class','attacker');
            $selected = null;
         }
         else {
            $cell.attr('class','attacker-select');
            $selected = $cell;
         }
      }
      else if($selected){
         if(type == "empty") {
            var result = google_apis.player_move(
               $selected.attr('id'),
               $cell.attr('id')
            );
         }
         else {
            $selected.attr('class','attacker');
            $selected = null;
         }
      }
   }
   function new_game() {
      $board.on('click','.row > div > div', onClick);
      google_apis.new_game();
      $board_header.hide();
   }
   $new_game.on('click',new_game);

   function cellClick(target, params) {

   }

   function game_end(game_state) {
      if(game_state == 2 || game_state == 3) {
         if(game_state == 2){
            $board_header.append("Player won!");
            $board_header.addClass("attacker-header");
         }
         else {
             $board_header.addClass("defender-header");
             $board_header.append("AI won!");
          }
         $board.off();
         $board_header.removeClass('hidden');
         return true;
      }
      return false;
   }

   function empty_board() {

      $board = $("#board");
      var table_builder = "";
   	for(var row=0; row< HEIGHT; row++){
         var row_builder = "<div class='row'>";
   		for(var col=0; col< WIDTH; col++) {
            row_builder += "<div><div data-val='0' class='empty' id='" + row + "," + col + "'></div></div>";
   		}
         row_builder += "</div>";

         table_builder += row_builder;
   	}

      $board.append(table_builder);

      $board.on('click','.row > div > div', onClick);

   }

   function fadeInNewClass(source, from_class, to_class) {
      source.switchClass(from_class, to_class, 1000);
   }

   function move(origin_value, origin, destination, captures) {

      $selected.attr('class','attacker');
      $selected = null;

      var or = document.getElementById(origin);
      var $or = $(or);
      $or.attr('class',typeNames[0]);

      var de = document.getElementById(destination);
      var $de = $(de);
      $de.attr('class',typeNames[origin_value]);

      if(captures && captures[0]) {

         for(var i=0; i< captures.length; i++) {
            f = captures[i][0];
            t = captures[i][1];
            var ca = document.getElementById(f + "," + t);
            var $ca = $(ca);
            $ca.attr('class',typeNames[0]);
         }
      }
   }

   function new_board(board) {
      board = board;
   	for(var row=0; row < board.length; row++){
         var columnWidth = board[row].length;
   		for(var col=0; col < columnWidth; col++) {
            var val = board[row][col];

               var t = document.getElementById(row + "," + col);

               var $cell = $(t);

               $cell.attr('class',typeNames[val]);

   		}
   	}

   }

   function make_move(from_r, from_c, to_r, to_c, captures, value) {

      board[from_r][from_c] = 0;
      board[to_r][to_c] = value;
      $("#" + from_r + "," + from_c).attr('class','empty');
      $("#" + to_r + "," + to_c).attr('class',typeNames[value]);
      for(var capture in captures) {
         var r = capture[0];
         var c = capture[1];
         board[r][c] = 0;
         $("#" + r + "," + c).attr('class','empty');
      }

   }

   return {
      empty_board: empty_board,
      new_board: new_board,
      move: move,
      game_end: game_end
   };
})();

var dialogs = (function(){

   var $how = $("#how");
   var $history = $("#history");
   var $about = $("#about");

   var how_dialog = document.getElementById('how-dialog');
   var history_dialog = document.getElementById('history-dialog');
   var about_dialog = document.getElementById('about-dialog');

   function openHow(){
      how_dialog.showModal();
   }

   function openHistory() {
      history_dialog.showModal();
   }

   function openAbout() {
      about_dialog.showModal();
   }

   function closeHow() {
      how_dialog.close();
   }

   function closeHistory() {
      history_dialog.close();
   }

   function closeAbout() {
      about_dialog.close();
   }

   $how.on('click', openHow);
   $history.on('click', openHistory);
   $about.on('click', openAbout);

   how_dialog.querySelector('.close').addEventListener('click', closeHow);
   history_dialog.querySelector('.close').addEventListener('click', closeHistory);
   about_dialog.querySelector('.close').addEventListener('click', closeAbout);

})();

var google_apis = (function() {

   var KEY = null;

   function new_game() {
      gapi.client.hnefatafl.new_game().execute(function(response){
         KEY = response.key;
         board.new_board(JSON.parse(response.board));
         ai_move();
      });
   }

   function last_player_game() {

      gapi.client.hnefatafl.last_player_game().execute(function(response){
         if(response.code == 404) {
            new_game();
         }
         else {
            KEY = response.key;
            board.new_board(JSON.parse(response.board));
            var state = parseInt(response.state);
            if(!board.game_end(state))
               if(state == 1) ai_move();
         }
      });
   }

   function player_move(origin, destination) {
      var origins = origin.split(',');
      var destinations = destination.split(',');

      try
      {
         gapi.client.hnefatafl.player_move({
            "game_key": KEY,
            "origin_row": origins[0],
            "origin_column": origins[1],
            "destination_row": destinations[0],
            "destination_column": destinations[1]
         }).execute(function(response){

            board.move(
               response.origin_value,
               response.origin,
               response.destination,
               response.captures != "[]" ?
               JSON.parse(
                  response.captures.replace('(','[').replace(')',']')
               ): null
            );
            if(!board.game_end(parseInt(response.game_state))) {
               ai_move();
            }

         });
      }
      catch(err) {

      }
   }

      function ai_move() {
         gapi.client.hnefatafl.ai_move({
            "game_key":KEY
         }).execute(function(response){
            board.move(
               response.origin_value,
               response.origin,
               response.destination,
               response.captures != "[]" ?
               JSON.parse(
                  response.captures.replace('(','[').replace(')',']')
               ): null
            );
            board.game_end(parseInt(response.game_state));
         });
      }
      return {
         new_game: new_game,
         player_move: player_move,
         ai_move: ai_move,
         last_player_game: last_player_game
      };
})();

var google_auth = (function(){

   const url = "http://localhost:8080/_ah/api";
   var signedin = false;

   function loadModules(){
      gapi.client.load(
         'oauth2',
         'v2'
      );
      gapi.client.load(
         'hnefatafl',
         'v1',
         afterLoaded,
         url
      );
   }

   function afterLoaded() {
      signin(immediate = true);
      setTimeout(profile.enableLogin(), 2000);

   }

   function signin(immediate) {
      gapi.auth.authorize({
         client_id: '314272160250-ucrqg44c1oj9knlrfatqvqf1b3pm9819.apps.googleusercontent.com',
         scope: 'https://www.googleapis.com/auth/userinfo.email',
         immediate: immediate
      }, userAuthed);
   }

   function isAuthed() {
      return signedin;
   }

   function userAuthed(mode) {
      var request = gapi.client.oauth2.userinfo.get().execute(function(resp) {
         if (!resp.code) {
            profile.setLoggedIn(resp.picture, resp.name);
            signedin = true;
            //google_apis.new_game(google_apis.ai_move);
            google_apis.last_player_game();
         //   google_apis.ai_move();
          }
     });
   }
   return {
      loadModules: loadModules,
      isAuthed: isAuthed,
      signin: signin
   };

})();

var profile = (function() {
   var $login = $("#login");
   //var $picture = $("#picture");
   var $name = $("#name");

   function enableLogin() {
      $login.on('click', _loginClick);
      $login.removeClass("hidden");
   }
   function _loginClick() {
      google_auth.signin(immediate = false);
   }
   function _logoutClick() {
      //singin(immediate = false);
   }
   function setLoggedIn(src, name) {
      $name.html(name);
      $name.removeClass("hidden");
      $login.addClass("hidden");
   }
   return {
      enableLogin: enableLogin,
      setLoggedIn: setLoggedIn
   };
})();

//# sourceMappingURL=data:application/json;base64,
